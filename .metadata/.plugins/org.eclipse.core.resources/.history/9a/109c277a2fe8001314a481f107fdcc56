package Algorithm.Genetic;
import java.util.Random;
import java.util.Vector;

import GeographicArea.Lote;
import GeographicArea.Utilities.UtilitieType;
import GrafoStruct.Node;

public class Chromosome implements Comparable<Chromosome> {
	private final String gene;
	private final int fitness;

	/** The target gene, converted to an array for convenience. */
	//private static final char[] TARGET_GENE = "".toCharArray();
	
	private static int chromosomeSize = 0;
	private static int chromosomeSectorSize = 0;
	private static Vector<UtilitieType> utilities = new  Vector<UtilitieType>();
	private static Vector<Node> lotes = new Vector<Node>();

	/** Convenience randomizer. */
	private static final Random rand = new Random(System.currentTimeMillis());

	/**
	 * Default constructor.
	 *
	 * @param gene The gene representing this <code>Chromosome</code>.
	 */
	public Chromosome(String gene) {
		this.gene    = gene;
		this.fitness = calculateFitness(gene);
	}

	/**
	 * Method to retrieve the gene for this <code>Chromosome</code>.
	 *
	 * @return The gene for this <code>Chromosome</code>.
	 */
	public String getGene() {
		return gene;
	}
	
	public static void setChromosomeSize(int size){
		chromosomeSize = size;
	}
	public static void setChromosomeSector(int size){
		chromosomeSectorSize = size;
	}
	public static void setChromosomeUtilities(Vector<UtilitieType> u){
		utilities = u;
	}
	public static void setChromosomeLotes(Vector<Node> n){
		lotes = n;
	}

	/**
	 * Method to retrieve the fitness of this <code>Chromosome</code>.  Note
	 * that a lower fitness indicates a better <code>Chromosome</code> for the
	 * solution.
	 *
	 * @return The fitness of this <code>Chromosome</code>.
	 */
	public int getFitness() {
		return fitness;
	}

	/**
	 * Helper method used to calculate the fitness for a given gene.  The
	 * fitness is defined as being the sum of the absolute value of the 
	 * difference between the current gene and the target gene.
	 * 
	 * @param gene The gene to calculate the fitness for.
	 * 
	 * @return The calculated fitness of the given gene.
	 */
	private static int calculateFitness(String gene) {
		
		///  chromosomeSectorSize
		int fitness = 0, numberOfUtilities = 0, utilitieIndex;
		int[] numberOfR = new int[chromosomeSectorSize];		
		char[] arr  = gene.toCharArray();
		
		for(int i = 0; i < numberOfR.length; i++)
			numberOfR[i] = 0;
		
		for (int i = 0; i < arr.length; i+=chromosomeSectorSize) {
			
			utilitieIndex = 0;
			numberOfUtilities = 0;
					
			for(int j = 0; j < chromosomeSectorSize; j++){
				numberOfUtilities += ((int)arr[i+j])-48;
				
				numberOfR[j] += ((int)arr[i+j])-48;
				
				utilitieIndex += (((int)arr[i+j])-48)*j;
			}
			
			if(numberOfUtilities == 1){//verifica restricoes de utilidade
				fitness += getGroundTypeFitness(utilities.get(utilitieIndex), lotes.get( i/chromosomeSectorSize));
				fitness += getGroundInclinationFitness(utilities.get(utilitieIndex), lotes.get( i/chromosomeSectorSize));
				fitness += getLoteCostFitness(utilities.get(utilitieIndex), lotes.get( i/chromosomeSectorSize));
			}
			
			if(numberOfUtilities != 1)// mais de um uso nesse lote
				numberOfUtilities = Math.abs(numberOfUtilities-1)*1000;
			else
				numberOfUtilities = 0;			
			
			fitness += numberOfUtilities;
		}


		for(int i = 0; i < numberOfR.length; i++)
			if(numberOfR[i] > 1)
				fitness += numberOfR[i]*1000;
		
		if(numberOfUtilities > chromosomeSectorSize)
			numberOfUtilities = Math.abs(numberOfUtilities-chromosomeSectorSize)*1000;
		
		fitness += numberOfUtilities;

		return fitness;
	}
	
	private static int getGroundTypeFitness(UtilitieType u, Node n ){

		if(((Lote)n).getGroundType().getValue() < u.getGroundQuality())
			return 100;//*Math.abs(((Lote)n).getGroundType().getValue() - u.getGroundQuality());
		else
			return 0;
	}
	private static int getGroundInclinationFitness(UtilitieType u, Node n ){
		
		if(((Lote)n).getGroundInclination().getValue() < u.getGroundInclination())
			return 100;//*Math.abs(((Lote)n).getGroundInclination().getValue() - u.getGroundInclination());
		else
			return 0;
	}
	
	private static int getLoteCostFitness(UtilitieType u, Node n){
		
		if(u.getLoteCost() != 0 && ((Lote)n).getCost() > u.getLoteCost())
			return 100;//*Math.abs(((Lote)n).getCost() - u.getLoteCost());
		else
			return 0;
	}

	/**
	 * Method to generate a new <code>Chromosome</code> that is a random
	 * mutation of this <code>Chromosome</code>.  This method randomly
	 * selects one character in the <code>Chromosome</code>s gene, then
	 * replaces it with another random (but valid) character.  Note that
	 * this method returns a new <code>Chromosome</code>, it does not
	 * modify the existing <code>Chromosome</code>.
	 * 
	 * @return A mutated version of this <code>Chromosome</code>.
	 */
	public Chromosome mutate() {
		char[] arr  = gene.toCharArray();
		char[] newArr = new char[gene.length()];
		int idx     = rand.nextInt(utilities.size());
		
		System.arraycopy(arr, 0, newArr, 0, idx*utilities.size());

		return new Chromosome(String.valueOf(arr));
	}
	
	private char[] getRandomLote(int nUtilities){
		int idx = rand.nextInt(nUtilities);
		char[] returnValue = new char[nUtilities];
		
		for(int i = 0; i < nUtilities; i++)
			if(i == idx)
				returnValue[i]='1';
			else
				returnValue[i]='0';
		
		return returnValue;
	}

	/**
	 * Method used to mate this <code>Chromosome</code> with another.  The
	 * resulting child <code>Chromosome</code>s are returned.
	 * 
	 * @param mate The <code>Chromosome</code> to mate with.
	 * 
	 * @return The resulting <code>Chromosome</code> children.
	 */
	public Chromosome[] mate(Chromosome mate) {
		// Convert the genes to arrays to make thing easier.
		char[] arr1  = gene.toCharArray();
		char[] arr2  = mate.gene.toCharArray();

		// Select a random pivot point for the mating
		int pivot    = rand.nextInt(arr1.length);

		// Provide a container for the child gene data
		char[] child1 = new char[gene.length()];
		char[] child2 = new char[gene.length()];

		// Copy the data from each gene to the first child.
		System.arraycopy(arr1, 0, child1, 0, pivot);
		System.arraycopy(arr2, pivot, child1, pivot, (child1.length - pivot));

		// Repeat for the second child, but in reverse order.
		System.arraycopy(arr2, 0, child2, 0, pivot);
		System.arraycopy(arr1, pivot, child2, pivot, (child2.length - pivot));

		return new Chromosome[] { new Chromosome(String.valueOf(child1)), 
				new Chromosome(String.valueOf(child2))}; 
	}

	/**
	 * A convenience method to generate a randome <code>Chromosome</code>.
	 * 
	 * @return A randomly generated <code>Chromosome</code>.
	 */
	static Chromosome generateRandom() {
		char[] arr = new char[chromosomeSize];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = (char) (rand.nextInt(2) + 48);
		}

		return new Chromosome(String.valueOf(arr));
	}

	/**
	 * Method to allow for comparing <code>Chromosome</code> objects with
	 * one another based on fitness.  <code>Chromosome</code> ordering is 
	 * based on the natural ordering of the fitnesses of the
	 * <code>Chromosome</code>s.  
	 */
	@Override
	public int compareTo(Chromosome c) {
		if (fitness < c.fitness) {
			return -1;
		} else if (fitness > c.fitness) {
			return 1;
		}

		return 0;
	}

	/**
	 * @see Object#equals(Object)
	 */
	@Override
	public boolean equals(Object o) {
		if (!(o instanceof Chromosome)) {
			return false;
		}

		Chromosome c = (Chromosome) o;
		return (gene.equals(c.gene) && fitness == c.fitness);
	}

	/**
	 * @see Object#hashCode()
	 */
	@Override
	public int hashCode() {		
		return new StringBuilder().append(gene).append(fitness)
				.toString().hashCode();
	}
}